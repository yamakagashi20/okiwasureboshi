import asyncio
from bleak import BleakScanner

# 取得対象のH5151のMACアドレス（あなたの環境に合わせて変更）
TARGET_MAC = "F2:B2:03:86:69:61"

def decode_govee_data(manufacturer_data: dict):
    """GoveeのManufacturerデータから温度・湿度を抽出する"""
    if 1 not in manufacturer_data:
        return None, None

    raw = manufacturer_data[1]
    if len(raw) < 5:
        return None, None

    # データ形式は Govee BLE広告仕様（温度・湿度が2バイトごとに格納）
    temp_raw = (raw[1] << 8) | raw[2]
    hum_raw = (raw[3] << 8) | raw[4]

    # 温度は10倍、湿度は100倍されているケースが多い
    temperature = temp_raw / 100.0
    humidity = hum_raw / 100.0

    return temperature, humidity

async def scan():
    print("H5151をスキャン中… Ctrl+Cで停止")
    while True:
        devices = await BleakScanner.discover(timeout=5.0)
        for d in devices:
            if d.address.upper() == TARGET_MAC.upper():
                print(f"\n対象デバイス発見: {d.name} ({d.address})")
                temp, hum = decode_govee_data(d.metadata.get("manufacturer_data", {}))
                if temp is not None:
                    print(f"温度: {temp:.2f} °C, 湿度: {hum:.2f} %")
                else:
                    print("温湿度データを取得できませんでした")

asyncio.run(scan())
--------------------------


検出: F2:B2:03:86:69:61
manufacturer_data: {1: b'\x01\x01\x04D\x15d', 76: b'\x02\x15INTELLI_ROCKS_HWPu\xf2\xff\x0c'}

------------------------------------------
#!/usr/bin/env python3
# h5151_check_fixed.py
# 実行前: pip3 install bleak
# 実行例: sudo python3 h5151_check_fixed.py

import asyncio
from bleak import BleakScanner

# 対象デバイスのMACアドレスを指定（大文字小文字はどちらでも可）
TARGET_MAC = "F2:B2:03:86:69:61"

def decode_govee_manufacturer(manufacturer_data: dict):
    """
    柔軟にデコードを試みる。
    - humidity: 常に最後の2バイトを結合して /100
    - temperature:
      1) 単一バイト形式を探索 (byte - 43 が妥当範囲なら採用)
      2) フォールバックで 2バイト結合を /100 として試す
    """
    if not manufacturer_data:
        return None, None

    # まず最初の manufacturer_data 要素を取り出す
    first_key = next(iter(manufacturer_data))
    raw = bytes(manufacturer_data[first_key])
    rb = list(raw)

    # デバッグ出力用に生データを保持
    # print("raw bytes:", rb)

    # ----- humidity: 最後の2バイトを使う（多くの機種でこのパターン）
    hum = None
    if len(rb) >= 2:
        hum_raw = (rb[-2] << 8) | rb[-1]
        hum = hum_raw / 100.0

    # ----- temperature: 単一バイト（オフセット）を探索
    temp = None
    for i in range(0, max(0, len(rb) - 2)):  # 最後の2バイトは湿度に使うため除外
        candidate = rb[i] - 43  # 今回のケースで有効と分かっているオフセット
        if -40.0 <= candidate <= 85.0:
            temp = float(candidate)
            # 見つかったらループを抜ける
            break

    # ----- フォールバック: 2バイト結合 -> /100
    if temp is None and len(rb) >= 4:
        # 例: [ ..., T_hi, T_lo, H_hi, H_lo ]
        t_hi = rb[-4]
        t_lo = rb[-3]
        temp_raw = (t_hi << 8) | t_lo
        temp2 = temp_raw / 100.0
        if -40.0 <= temp2 <= 85.0:
            temp = float(temp2)

    return temp, hum

async def scan_loop():
    print("スキャン中… (Ctrl+Cで停止)")
    while True:
        devices = await BleakScanner.discover(timeout=4.0)
        found = False
        for d in devices:
            if d.address.upper() == TARGET_MAC.upper():
                found = True
                print(f"\n対象デバイス発見: {d.name}  ({d.address})  RSSI={d.rssi}dBm")
                mfg = d.metadata.get("manufacturer_data", {})
                # デバッグ: 生データ表示
                print("manufacturer_data (raw):", {k: bytes(v) for k,v in mfg.items()})
                temp, hum = decode_govee_manufacturer(mfg)
                if temp is not None and hum is not None:
                    print(f"温度: {temp:.2f} °C    湿度: {hum:.2f} %")
                elif temp is not None:
                    print(f"温度: {temp:.2f} °C    湿度: 取得不可")
                elif hum is not None:
                    print(f"温度: 取得不可    湿度: {hum:.2f} %")
                else:
                    print("温湿度デコードに失敗しました（フォーマットが未対応）")
        if not found:
            print(".", end="", flush=True)
        await asyncio.sleep(1.0)

if __name__ == "__main__":
    try:
        asyncio.run(scan_loop())
    except KeyboardInterrupt:
        print("\n終了")

------------------------------------------------------



import asyncio
from bleak import BleakScanner

async def main():
    def detection_callback(device, advertisement_data):
        if advertisement_data.manufacturer_data:
            print(f"Device: {device.address}")
            print(f"manufacturer_data: {advertisement_data.manufacturer_data}")

    scanner = BleakScanner(detection_callback=detection_callback)
    await scanner.start()
    await asyncio.sleep(10.0)  # 10秒間スキャン
    await scanner.stop()

asyncio.run(main())




import asyncio
from bleak import BleakScanner

# --- MACアドレスを指定 ---
TARGET_MAC = "F2:B2:03:86:69:61"

# 温度・湿度変換係数
TEMP_A = 0.0481
TEMP_B = -26.6
HUM_A = 0.56024
HUM_B = 33.1723

def raw_to_temp(raw):
    return TEMP_A * raw + TEMP_B

def raw_to_humi(raw):
    val = HUM_A * raw + HUM_B
    if val < 0:
        return 0.0
    if val > 100:
        return 100.0
    return val

def parse_manufacturer_bytes(data: bytes):
    if len(data) >= 5:
        temp_raw = int.from_bytes(data[2:4], byteorder="big", signed=False)
        hum_raw = data[4]
        temp_c = raw_to_temp(temp_raw)
        hum_pct = raw_to_humi(hum_raw)
        return temp_raw, temp_c, hum_raw, hum_pct
    return None

async def main(duration=30.0):
    def detection_callback(device, advertisement_data):
        if device.address.upper() != TARGET_MAC.upper():
            return  # MACアドレスが違う場合は無視

        md = advertisement_data.manufacturer_data
        if not md:
            return
        for company_id, data in md.items():
            parsed = parse_manufacturer_bytes(data)
            if parsed:
                temp_raw, temp_c, hum_raw, hum_pct = parsed
                print(f"{device.address} | Temp: {temp_c:.2f} °C | Humidity: {hum_pct:.2f}% | raw_hex: {data.hex()}")
            else:
                print(f"{device.address} | raw data too short: {data.hex()}")

    scanner = BleakScanner(detection_callback=detection_callback)
    await scanner.start()
    await asyncio.sleep(duration)
    await scanner.stop()

if __name__ == "__main__":
    asyncio.run(main(30.0))  # 30秒スキャン


Device: F2:B2:03:86:69:61
manufacturer_data: {1: b'\x01\x01\x03\xb3\x91d', 76: b'\x02\x15INTELLI_ROCKS_HWPu\xf2\xff\x0c'}


import asyncio
from bleak import BleakScanner

# --- 対象センサーのMACアドレス ---
TARGET_MAC = "F2:B2:03:86:69:61"

# --- 温度換算係数 ---
TEMP_A = 0.016
TEMP_B = 7.85

# --- 湿度換算係数 ---
HUM_A = 0.04425
HUM_B = 49.58

def raw_to_temp(raw):
    """raw から摂氏温度に変換"""
    return TEMP_A * raw + TEMP_B

def raw_to_humi(raw):
    """raw から湿度％に変換"""
    val = HUM_A * raw + HUM_B
    # 0〜100%にクリップ
    return max(0.0, min(100.0, val))

def parse_manufacturer_bytes(data: bytes):
    """manufacturer_data の生データから温湿度を取得"""
    if len(data) >= 5:
        # バイト3-4が温度 raw (big-endian)
        temp_raw = int.from_bytes(data[2:4], byteorder="big", signed=False)
        # バイト5が湿度 raw
        hum_raw = data[4]
        temp_c = raw_to_temp(temp_raw)
        hum_pct = raw_to_humi(hum_raw)
        return temp_raw, temp_c, hum_raw, hum_pct
    return None

async def main(scan_duration=60.0):
    def detection_callback(device, advertisement_data):
        # MACアドレスが一致しない場合は無視
        if device.address.upper() != TARGET_MAC.upper():
            return

        md = advertisement_data.manufacturer_data
        if not md:
            return

        for company_id, data in md.items():
            # company_id = 1 のみ温湿度解析
            if company_id != 1:
                continue

            parsed = parse_manufacturer_bytes(data)
            if parsed:
                temp_raw, temp_c, hum_raw, hum_pct = parsed
                print(f"{device.address} | Temp: {temp_c:.2f} °C | Humidity: {hum_pct:.2f}% | raw_hex: {data.hex()}")
            else:
                print(f"{device.address} | raw data too short: {data.hex()}")

    # スキャナーを作成しコールバックを設定
    scanner = BleakScanner(detection_callback=detection_callback)
    print(f"Scanning for {TARGET_MAC} for {scan_duration} seconds...")
    await scanner.start()
    await asyncio.sleep(scan_duration)
    await scanner.stop()
    print("Scan finished.")

if __name__ == "__main__":
    asyncio.run(main(scan_duration=60.0))  # 60秒間スキャン


CSV保存


import asyncio
import csv
from datetime import datetime
from bleak import BleakScanner

# --- 設定 ---
TARGET_MAC = "F2:B2:03:86:69:61"
SCAN_DURATION = 10 * 60  # 10分間（600秒）
CSV_FILENAME = "h5110_log.csv"

# --- 温度換算係数 ---
TEMP_A = 0.016
TEMP_B = 7.85

# --- 湿度換算係数 ---
HUM_A = 0.04425
HUM_B = 49.58

def raw_to_temp(raw):
    return TEMP_A * raw + TEMP_B

def raw_to_humi(raw):
    val = HUM_A * raw + HUM_B
    return max(0.0, min(100.0, val))

def parse_manufacturer_bytes(data: bytes):
    if len(data) >= 5:
        temp_raw = int.from_bytes(data[2:4], byteorder="big", signed=False)
        hum_raw = data[4]
        temp_c = raw_to_temp(temp_raw)
        hum_pct = raw_to_humi(hum_raw)
        return temp_raw, temp_c, hum_raw, hum_pct
    return None

async def main():
    # CSVファイル初期化
    with open(CSV_FILENAME, mode='w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["timestamp", "mac", "temp_c", "humidity_pct", "raw_hex"])

    def detection_callback(device, advertisement_data):
        if device.address.upper() != TARGET_MAC.upper():
            return

        md = advertisement_data.manufacturer_data
        if not md:
            return

        for company_id, data in md.items():
            # company_id = 1 のみ解析
            if company_id != 1:
                continue

            parsed = parse_manufacturer_bytes(data)
            if parsed:
                temp_raw, temp_c, hum_raw, hum_pct = parsed
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                print(f"{timestamp} | {device.address} | Temp: {temp_c:.2f} °C | Humidity: {hum_pct:.2f}% | raw_hex: {data.hex()}")
                # CSVに追記
                with open(CSV_FILENAME, mode='a', newline='') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow([timestamp, device.address, f"{temp_c:.2f}", f"{hum_pct:.2f}", data.hex()])
            else:
                print(f"{device.address} | raw data too short: {data.hex()}")

    scanner = BleakScanner(detection_callback=detection_callback)
    print(f"Scanning for {TARGET_MAC} for {SCAN_DURATION} seconds...")
    await scanner.start()
    await asyncio.sleep(SCAN_DURATION)
    await scanner.stop()
    print(f"Scan finished. Data saved to {CSV_FILENAME}")

if __name__ == "__main__":
    asyncio.run(main())
