from bleak import BleakScanner

async def scan():
    devices = await BleakScanner.discover()
    for d in devices:
        if "Govee_H5110" in d.name:
            print(d.address, d.metadata)

import asyncio
asyncio.run(scan())



import asyncio
from bleak import BleakScanner

def parse_govee_data(data: bytes):
    # H5100/H5110 系列は Manufacturer Data に温湿度が入っている
    # データ構造は機種ごとに異なるため要調整
    if len(data) >= 6:
        temp_raw = int.from_bytes(data[0:2], byteorder="little", signed=True)
        hum_raw  = int.from_bytes(data[2:4], byteorder="little", signed=False)
        batt_raw = data[4]
        temp = temp_raw / 100
        hum = hum_raw / 100
        batt = batt_raw
        return temp, hum, batt
    return None

async def scan():
    devices = await BleakScanner.discover(timeout=10.0)
    for d in devices:
        if d.name and "Govee" in d.name:
            print(f"Found {d.name} - {d.address}")
            if d.metadata.get("manufacturer_data"):
                for _, md in d.metadata["manufacturer_data"].items():
                    parsed = parse_govee_data(md)
                    if parsed:
                        temp, hum, batt = parsed
                        print(f"Temp: {temp} °C, Humidity: {hum} %, Battery: {batt} %")

asyncio.run(scan())



import asyncio
from bleak import BleakScanner

async def scan():
    devices = await BleakScanner.discover(timeout=10.0)
    for d in devices:
        print(d)

asyncio.run(scan())



import asyncio
from bleak import BleakScanner
import time

TARGET_MAC = "AA:BB:CC:DD:EE:FF"  # ←あなたのH5110のMACに置き換え
INTERVAL = 30   # 秒ごとに取得

def parse_govee_data(data: bytes):
    """
    Govee H5100/H5110 系のManufacturer Dataをパース
    データ仕様は機種によって異なるので必要に応じて調整
    """
    if len(data) >= 6:
        temp_raw = int.from_bytes(data[0:2], byteorder="little", signed=True)
        hum_raw  = int.from_bytes(data[2:4], byteorder="little", signed=False)
        batt_raw = data[4]
        temp = temp_raw / 100
        hum = hum_raw / 100
        batt = batt_raw
        return temp, hum, batt
    return None

async def get_temp_once():
    devices = await BleakScanner.discover(timeout=5.0)
    for d in devices:
        if d.address == TARGET_MAC:
            if d.metadata.get("manufacturer_data"):
                for _, md in d.metadata["manufacturer_data"].items():
                    parsed = parse_govee_data(md)
                    if parsed:
                        temp, hum, batt = parsed
                        return temp, hum, batt
    return None

async def main():
    while True:
        data = await get_temp_once()
        if data:
            temp, hum, batt = data
            now = time.strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{now}] Temp: {temp:.2f} °C, Humidity: {hum:.2f} %, Battery: {batt}%")
        else:
            print("No data found.")
        await asyncio.sleep(INTERVAL)

asyncio.run(main())

